Requirements:
The program may be any type of game or interactive simulation.
The program should use classes and objects.
The program should use the four principles of object-oriented programming.
The program should use the libraries chosen in the course.
The program should be delivered through a distributed version control system.
The program should be able to be run from the command line.
The program should be entered in the end-of-course contest.



See README file for technologies required



Features:
2D top-down
Singleplayer (to start)
As the bike moves, it leaves a trail that can't be crossed
Movement: Up, down, left, right (WASD)

Optional Features:
Draw our own sprites? (Alternative of turtle)
Maps with obstacles?
Two-player?
Powerups?
    Slow down
    Speed up
    Temporary invincibility
    Score multiplier?



Classes:
player
draw_trail
game
director
handle_collisions
score/timer
actor
input_service
output_service
constants
point
action

Optional Feature Classes:
map
powerup



Four Principles:
Polymorphism
Inheritance
Abstraction
Classes and Objects



Timeline: 4 weeks of coding

Week 1 (Alpha): Meet on the 23rd, Wednesday 7 PM MST (Backup: 1 PM MST)
No sprites yet
Learn arcade module
Singleplayer (square sprite)
Movement works
Dies from hitting wall

Week 2 (Beta):
General improvements
Implement trails
Trail can be collided with
ai
module docstrings

Week 3 (Release):
General improvements
Miguel Sprites:
    Resize sprites to actual size? (they are currently 3 times too large)
    Resize wall.png to a square (40px sides)
    Create 6 total version (full border, one side missing, two corner sides missing, 3 sides missing, all sides missing, 2 opposite sides missing)
Convert wall lists into spritelists, (use_spatial_hash and is_static for non-moving objects) (Ethan)
Two Player (Ethan)
Fix ai collision (Ethan)
Maps (Rich and Ethan)
Sounds (Hunter and Avery)
    Collision with walls
    General background (music)
Tests:
    trail (Miguel)
    point (get_angle, multiply) (Hunter)
    player (Avery)
    lightbike (Rich)
    ai (Ethan)

Week 4 (Stable):
General improvements
Bugtesting
Main menu
Particle effects on collision?
Powerups?



Responsibilities:

Submissions:
Rich Abbott
Ethan Charles
Avery Crowson
Hunter Dunlap
Miguel Marin

Classes:
sound? (Week 3)

Ethan:
director (removed)
game
output_service
draw_actors_action

draw_trail (Week 2, turned into a method for output_service)
update control_actors_action for 2 players(week 2, merge input_service with control_actors_action)
score/timer (Week 2)
Update ai set_movement_speed to update the current velocity when set


Miguel:
sprites (wall, player, ai(basically just player))
Update sprites to smaller file sizes (Week 2)
Rotate to face right (0 degrees)
Center Sprites, remove excess area
Make new wall sprites?
trail (Week 2 together with Ethan)
handle_collisions_action (Week 2, add collisions with walls)

Avery:
control_actors_action
player
constants

Rich:
move_actors_action
plan out some maps (Week 2)
input_service (update week 3 for two players)
implement maps (Week 3)

Hunter:
actor
point
ai (Week 2)